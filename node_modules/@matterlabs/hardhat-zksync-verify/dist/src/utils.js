"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseWrongConstructorArgumentsError = exports.removeMultipleSubstringOccurrences = exports.retrieveContractBytecode = exports.executeVeificationWithRetry = exports.encodeArguments = exports.delay = exports.handleAxiosError = void 0;
const axios_1 = __importDefault(require("axios"));
const zk = __importStar(require("zksync-web3"));
const service_1 = require("./zksync-block-explorer/service");
const errors_1 = require("./errors");
const constants_1 = require("./constants");
const chalk_1 = __importDefault(require("chalk"));
function handleAxiosError(error) {
    var _a;
    if (axios_1.default.isAxiosError(error)) {
        throw new Error(`Axios error (code: ${error.code}) during the contract verification request\n Reason: ${(_a = error.response) === null || _a === void 0 ? void 0 : _a.data}`);
    }
    else {
        throw new errors_1.ZkSyncVerifyPluginError(`Failed to send contract verification request\n Reason: ${error}`);
    }
}
exports.handleAxiosError = handleAxiosError;
function delay(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
exports.delay = delay;
async function encodeArguments(abi, constructorArgs) {
    const { Interface } = await Promise.resolve().then(() => __importStar(require('@ethersproject/abi')));
    const contractInterface = new Interface(abi);
    let deployArgumentsEncoded;
    try {
        deployArgumentsEncoded = contractInterface.encodeDeploy(constructorArgs).replace('0x', '');
    }
    catch (error) {
        const errorMessage = error.message.includes(constants_1.WRONG_CONSTRUCTOR_ARGUMENTS)
            ? parseWrongConstructorArgumentsError(error.message)
            : error.message;
        throw new errors_1.ZkSyncVerifyPluginError(errorMessage);
    }
    return deployArgumentsEncoded;
}
exports.encodeArguments = encodeArguments;
async function executeVeificationWithRetry(requestId, verifyURL, maxRetries = 5, delayInMs = 1500) {
    let retries = 0;
    while (true) {
        const response = await (0, service_1.checkVerificationStatusService)(requestId, verifyURL);
        if (response.isVerificationSuccess() || response.isVerificationFailure()) {
            return response;
        }
        retries += 1;
        if (retries > maxRetries) {
            console.info(chalk_1.default.cyan((0, constants_1.PENDING_CONTRACT_INFORMATION_MESSAGE)(requestId)));
            return;
        }
        await delay(delayInMs);
    }
}
exports.executeVeificationWithRetry = executeVeificationWithRetry;
async function retrieveContractBytecode(address, hreNetwork) {
    const provider = new zk.Provider(hreNetwork.config.url);
    const bytecodeString = (await provider.send('eth_getCode', [address, 'latest']));
    const deployedBytecode = bytecodeString.startsWith('0x') ? bytecodeString.slice(2) : bytecodeString;
    if (deployedBytecode.length === 0) {
        throw new errors_1.ZkSyncVerifyPluginError(`The address ${address} has no bytecode. Is the contract deployed to this network?
  The selected network is ${hreNetwork.name}.`);
    }
    return deployedBytecode;
}
exports.retrieveContractBytecode = retrieveContractBytecode;
function removeMultipleSubstringOccurrences(inputString, stringToRemove) {
    const lines = inputString.split('\n');
    let output = '';
    let firstIdentifierFound = false;
    for (const line of lines) {
        if (line.trim().includes(stringToRemove)) {
            if (!firstIdentifierFound) {
                output += line + '\n';
                firstIdentifierFound = true;
            }
        }
        else {
            output += line + '\n';
        }
    }
    return output.trim();
}
exports.removeMultipleSubstringOccurrences = removeMultipleSubstringOccurrences;
function parseWrongConstructorArgumentsError(string) {
    // extract the values of the "types" and "values" keys from the string
    const data = JSON.parse(string.split('count=')[1].split(', value=')[0]);
    return `The number of constructor arguments you provided (${data['values']}) does not match the number of constructor arguments the contract has been deployed with (${data['types']}).`;
}
exports.parseWrongConstructorArgumentsError = parseWrongConstructorArgumentsError;
//# sourceMappingURL=utils.js.map