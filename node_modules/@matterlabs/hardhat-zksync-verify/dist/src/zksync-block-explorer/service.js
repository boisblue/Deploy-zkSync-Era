"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSupportedCompilerVersions = exports.verifyContractRequest = exports.checkVerificationStatusService = exports.ZkSyncBlockExplorerResponse = void 0;
const axios_1 = __importDefault(require("axios"));
const utils_1 = require("../utils");
const verification_status_response_1 = require("./verification-status-response");
const errors_1 = require("../errors");
class ZkSyncBlockExplorerResponse {
    constructor(response) {
        this.status = parseInt(response.status, 10);
        this.message = response.data;
    }
    isOk() {
        return this.status === 200;
    }
}
exports.ZkSyncBlockExplorerResponse = ZkSyncBlockExplorerResponse;
async function checkVerificationStatusService(requestId, verifyURL) {
    let verificationStatusResponse;
    try {
        let data = await axios_1.default.get(verifyURL + `/${requestId}`);
        verificationStatusResponse = new verification_status_response_1.VerificationStatusResponse(data);
        return verificationStatusResponse;
    }
    catch (error) {
        (0, utils_1.handleAxiosError)(error);
    }
}
exports.checkVerificationStatusService = checkVerificationStatusService;
async function verifyContractRequest(req, verifyURL) {
    let data;
    try {
        data = await axios_1.default.post(verifyURL, req, { headers: { 'Content-Type': 'application/json' } });
        const zkSyncBlockExplorerResponse = new ZkSyncBlockExplorerResponse(data);
        if (!zkSyncBlockExplorerResponse.isOk()) {
            throw new errors_1.ZkSyncVerifyPluginError(zkSyncBlockExplorerResponse.message);
        }
        return zkSyncBlockExplorerResponse;
    }
    catch (error) {
        (0, utils_1.handleAxiosError)(error);
    }
}
exports.verifyContractRequest = verifyContractRequest;
async function getSupportedCompilerVersions(verifyURL) {
    try {
        const response = await axios_1.default.get(verifyURL + '/solc_versions');
        return response.data;
    }
    catch (error) {
        (0, utils_1.handleAxiosError)(error);
    }
}
exports.getSupportedCompilerVersions = getSupportedCompilerVersions;
//# sourceMappingURL=service.js.map