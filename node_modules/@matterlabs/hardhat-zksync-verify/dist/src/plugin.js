"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSolidityStandardJsonInput = exports.checkContractName = exports.flattenContractFile = exports.inferContractArtifacts = void 0;
const task_names_1 = require("hardhat/builtin-tasks/task-names");
const contract_names_1 = require("hardhat/utils/contract-names");
const constants_1 = require("./constants");
const bytecode_1 = require("./solc/bytecode");
const errors_1 = require("./errors");
async function inferContractArtifacts(artifacts, matchingCompilerVersions, deployedBytecode) {
    const contractMatches = [];
    const fqNames = await artifacts.getAllFullyQualifiedNames();
    for (const fqName of fqNames) {
        const buildInfo = await artifacts.getBuildInfo(fqName);
        if (buildInfo === undefined) {
            continue;
        }
        if (!matchingCompilerVersions.includes(buildInfo.solcVersion)) {
            continue;
        }
        const { sourceName, contractName } = (0, contract_names_1.parseFullyQualifiedName)(fqName);
        const contractInformation = await (0, bytecode_1.extractMatchingContractInformation)(sourceName, contractName, buildInfo, deployedBytecode);
        if (contractInformation !== null) {
            contractMatches.push(contractInformation);
            break;
        }
    }
    if (contractMatches.length === 0)
        throw new errors_1.ZkSyncVerifyPluginError(constants_1.NO_MATCHING_CONTRACT);
    if (contractMatches.length > 1)
        throw new errors_1.ZkSyncVerifyPluginError(constants_1.MULTIPLE_MATCHING_CONTRACTS);
    return contractMatches[0];
}
exports.inferContractArtifacts = inferContractArtifacts;
async function flattenContractFile(hre, filePath) {
    return await hre.run(task_names_1.TASK_FLATTEN_GET_FLATTENED_SOURCE, {
        files: [filePath],
    });
}
exports.flattenContractFile = flattenContractFile;
async function checkContractName(artifacts, contractFQN) {
    if (contractFQN !== undefined) {
        if (!(0, contract_names_1.isFullyQualifiedName)(contractFQN)) {
            throw new errors_1.ZkSyncVerifyPluginError(`A valid fully qualified name was expected. Fully qualified names look like this: "contracts/AContract.sol:TheContract"
Instead, this name was received: ${contractFQN}`);
        }
        if (!(await artifacts.artifactExists(contractFQN))) {
            throw new errors_1.ZkSyncVerifyPluginError(`The contract ${contractFQN} is not present in your project.`);
        }
    }
    else {
        throw new errors_1.ZkSyncVerifyPluginError(constants_1.CONTRACT_NAME_NOT_FOUND);
    }
}
exports.checkContractName = checkContractName;
function getSolidityStandardJsonInput(resolvedFiles) {
    return {
        language: 'Solidity',
        sources: Object.fromEntries(resolvedFiles.map((file) => [file.sourceName, { content: file.content.rawContent }])),
        settings: { optimizer: { enabled: true } },
    };
}
exports.getSolidityStandardJsonInput = getSolidityStandardJsonInput;
//# sourceMappingURL=plugin.js.map