import { CompilerInput, CompilerOutput } from 'hardhat/types';
export interface BytecodeExtractedData {
    normalizedBytecode: string;
}
export declare type SourceName = string;
export declare type ContractName = string;
export interface ContractInformation extends BytecodeExtractedData {
    compilerInput: CompilerInput;
    compilerOutput: CompilerOutput;
    solcVersion: string;
    sourceName: SourceName;
    contractName: ContractName;
    contract: CompilerOutput['contracts'][SourceName][ContractName];
}
export interface BytecodeSlice {
    start: number;
    length: number;
}
export declare type NestedSliceReferences = BytecodeSlice[][];
//# sourceMappingURL=types.d.ts.map