"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.callDeployScripts = exports.findDeployScripts = void 0;
const fs_1 = require("fs");
const path = __importStar(require("path"));
const fs_2 = __importDefault(require("fs"));
const errors_1 = require("./errors");
function getAllFiles(dir) {
    const files = [];
    const entries = fs_2.default.readdirSync(dir);
    for (const entry of entries) {
        const entryPath = path.join(dir, entry);
        if (fs_2.default.lstatSync(entryPath).isDirectory()) {
            files.push(...getAllFiles(entryPath));
        }
        else {
            files.push(entryPath);
        }
    }
    return files;
}
function findDeployScripts(hre) {
    const workDir = hre.config.paths.root;
    const deployScriptsDir = path.join(workDir, 'deploy');
    if (!(0, fs_1.existsSync)(deployScriptsDir)) {
        throw new errors_1.ZkSyncDeployPluginError('No deploy folder was found');
    }
    const deployScripts = getAllFiles(deployScriptsDir).filter((file) => path.extname(file) == '.ts' || path.extname(file) == '.js');
    return deployScripts;
}
exports.findDeployScripts = findDeployScripts;
async function callDeployScripts(hre, targetScript) {
    const scripts = findDeployScripts(hre);
    if (targetScript == '') {
        // Target script not specified, run everything.
        for (const script of scripts) {
            await runScript(hre, script);
        }
    }
    else {
        // TODO: Not efficient.
        let found = false;
        for (const script of scripts) {
            if (script.includes(targetScript)) {
                await runScript(hre, script);
                found = true;
                break;
            }
        }
        if (!found) {
            console.error(`Script ${targetScript} was not found, no scripts were run`);
        }
    }
}
exports.callDeployScripts = callDeployScripts;
async function runScript(hre, script) {
    delete require.cache[script];
    let deployFn = require(script);
    if (typeof deployFn.default === 'function') {
        deployFn = deployFn.default;
    }
    if (typeof deployFn !== 'function') {
        throw new errors_1.ZkSyncDeployPluginError('Deploy function does not exist or exported invalidly');
    }
    await deployFn(hre);
}
//# sourceMappingURL=plugin.js.map