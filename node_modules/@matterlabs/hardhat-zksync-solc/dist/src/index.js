"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.saltFromUrl = exports.ZKSOLC_BIN_REPOSITORY = exports.getZksolcUrl = exports.getZksolcPath = void 0;
const task_names_1 = require("hardhat/builtin-tasks/task-names");
const config_env_1 = require("hardhat/internal/core/config/config-env");
require("./type-extensions");
const artifacts_1 = require("hardhat/internal/artifacts");
const compile_1 = require("./compile");
const utils_1 = require("./utils");
Object.defineProperty(exports, "getZksolcPath", { enumerable: true, get: function () { return utils_1.getZksolcPath; } });
Object.defineProperty(exports, "getZksolcUrl", { enumerable: true, get: function () { return utils_1.getZksolcUrl; } });
Object.defineProperty(exports, "saltFromUrl", { enumerable: true, get: function () { return utils_1.saltFromUrl; } });
const child_process_1 = require("child_process");
const download_1 = require("hardhat/internal/util/download");
const fs_1 = __importDefault(require("fs"));
const chalk_1 = __importDefault(require("chalk"));
const constants_1 = require("./constants");
Object.defineProperty(exports, "ZKSOLC_BIN_REPOSITORY", { enumerable: true, get: function () { return constants_1.ZKSOLC_BIN_REPOSITORY; } });
const errors_1 = require("./errors");
(0, config_env_1.extendConfig)((config, userConfig) => {
    var _a, _b, _c;
    if ((_b = (_a = userConfig === null || userConfig === void 0 ? void 0 : userConfig.zksolc) === null || _a === void 0 ? void 0 : _a.settings) === null || _b === void 0 ? void 0 : _b.optimizer) {
        console.warn('`optimizer` setting is deprecated, optimizer is always enabled');
    }
    config.zksolc = Object.assign(Object.assign({}, constants_1.defaultZkSolcConfig), userConfig === null || userConfig === void 0 ? void 0 : userConfig.zksolc);
    config.zksolc.settings = Object.assign(Object.assign({}, constants_1.defaultZkSolcConfig.settings), (_c = userConfig === null || userConfig === void 0 ? void 0 : userConfig.zksolc) === null || _c === void 0 ? void 0 : _c.settings);
});
(0, config_env_1.extendEnvironment)((hre) => {
    if (hre.network.config.zksync) {
        hre.network.zksync = hre.network.config.zksync;
        let artifactsPath = hre.config.paths.artifacts;
        if (!artifactsPath.endsWith('-zk')) {
            artifactsPath = artifactsPath + '-zk';
        }
        let cachePath = hre.config.paths.cache;
        if (!cachePath.endsWith('-zk')) {
            cachePath = cachePath + '-zk';
        }
        // Forcibly update the artifacts object.
        hre.config.paths.artifacts = artifactsPath;
        hre.config.paths.cache = cachePath;
        hre.artifacts = new artifacts_1.Artifacts(artifactsPath);
        hre.config.solidity.compilers.forEach((compiler) => {
            const [major, minor] = (0, utils_1.getVersionComponents)(compiler.version);
            if (major === 0 && minor < 8 && hre.config.zksolc.settings.forceEvmla) {
                console.warn('zksolc solidity compiler versions < 0.8 work with forceEvmla enabled by default');
            }
            let settings = compiler.settings || {};
            // If solidity optimizer is not enabled, the libraries are not inlined and
            // we have to manually pass them into zksolc. That's why we force the optimization.
            compiler.settings = Object.assign(Object.assign({}, settings), { optimizer: { enabled: true } });
            // zkSolc supports only a subset of solc output selections
            compiler.settings.outputSelection = (0, utils_1.filterSupportedOutputSelections)(compiler.settings.outputSelection);
        });
    }
});
// This override is needed to invalidate cache when zksolc config is changed.
(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_GET_COMPILATION_JOBS, async (args, hre, runSuper) => {
    const { jobs, errors } = await runSuper(args);
    jobs.forEach((job) => {
        job.solidityConfig.zksolc = hre.config.zksolc;
    });
    return { jobs, errors };
});
(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_GET_ARTIFACT_FROM_COMPILATION_OUTPUT, async ({ sourceName, contractName, contractOutput, }, hre) => {
    var _a, _b, _c, _d;
    if (hre.network.zksync !== true) {
        return (0, artifacts_1.getArtifactFromContractOutput)(sourceName, contractName, contractOutput);
    }
    let bytecode = ((_b = (_a = contractOutput.evm) === null || _a === void 0 ? void 0 : _a.bytecode) === null || _b === void 0 ? void 0 : _b.object) || ((_d = (_c = contractOutput.evm) === null || _c === void 0 ? void 0 : _c.deployedBytecode) === null || _d === void 0 ? void 0 : _d.object) || '';
    bytecode = (0, utils_1.zeroxlify)(bytecode);
    let factoryDeps = {};
    let entries = Object.entries(contractOutput.factoryDependencies || {});
    for (const [hash, dependency] of entries) {
        factoryDeps[(0, utils_1.zeroxlify)(hash)] = dependency;
    }
    return {
        _format: constants_1.ZK_ARTIFACT_FORMAT_VERSION,
        contractName,
        sourceName,
        abi: contractOutput.abi,
        // technically, zkEVM has no difference between bytecode & deployedBytecode,
        // but both fields are included just in case
        bytecode,
        deployedBytecode: bytecode,
        // zksolc does not support unlinked objects,
        // all external libraries are either linked during compilation or inlined
        linkReferences: {},
        deployedLinkReferences: {},
        // zkSync-specific field
        factoryDeps,
    };
});
(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_RUN_SOLC, async (args, hre, runSuper) => {
    if (hre.network.zksync !== true) {
        return await runSuper(args);
    }
    if (hre.config.zksolc.settings.libraries) {
        args.input.settings.libraries = hre.config.zksolc.settings.libraries;
    }
    return await (0, compile_1.compile)(hre.config.zksolc, args.input, args.solcPath);
});
// This task is overriden to:
// - prevent unnecessary solc downloads when using docker
// - download zksolc binary if needed
// - validate zksolc binary
(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_GET_SOLC_BUILD, async (args, hre, runSuper) => {
    var _a, _b;
    if (hre.network.zksync !== true) {
        return await runSuper(args);
    }
    if (hre.config.zksolc.compilerSource === 'docker') {
        // Versions are wrong here when using docker, because there is no
        // way to know them beforehand except to run the docker image, which
        // adds 5-10 seconds to startup time. We cannot read them from artifacts,
        // since that would make cache invalid every time, if the version is
        // different from the one in the docker image.
        //
        // If you wish to know the actual versions from build-info files,
        // please look at `output.version`, `output.long_version`
        // and `output.zk_version` in the generated JSON.
        return {
            compilerPath: '',
            isSolsJs: false,
            version: args.solcVersion,
            longVersion: '',
        };
    }
    const solcBuild = await runSuper(args);
    let compilerPath = hre.config.zksolc.settings.compilerPath;
    if (compilerPath) {
        if ((0, utils_1.isURL)(compilerPath)) {
            const compilerUrl = compilerPath;
            // hashed url used as a salt to avoid name collisions
            const salt = (0, utils_1.saltFromUrl)(compilerUrl);
            // where the binary will be downloaded to
            hre.config.zksolc.settings.compilerPath = compilerPath = await (0, utils_1.getZksolcPath)(hre.config.zksolc.version, salt);
            if (!fs_1.default.existsSync(compilerPath)) {
                console.info(chalk_1.default.yellow(`Downloading zksolc from ${compilerUrl}`));
                try {
                    await (0, download_1.download)(compilerUrl, compilerPath);
                    console.info(chalk_1.default.green(`zksolc successfully downloaded`));
                    fs_1.default.chmodSync(compilerPath, '755');
                }
                catch (e) {
                    throw new errors_1.ZkSyncSolcPluginError(e.message.split('\n')[0]);
                }
            }
        }
        const versionOutput = (0, child_process_1.spawnSync)(compilerPath, ['--version']);
        const version = (_b = (_a = versionOutput.stdout) === null || _a === void 0 ? void 0 : _a.toString().match(/\d+\.\d+\.\d+/)) === null || _b === void 0 ? void 0 : _b.toString();
        if (versionOutput.status !== 0 || version == null) {
            throw new errors_1.ZkSyncSolcPluginError(`Specified zksolc binary is not found or invalid`);
        }
    }
    else {
        compilerPath = await (0, utils_1.getZksolcPath)(hre.config.zksolc.version);
        if (!fs_1.default.existsSync(compilerPath)) {
            console.info(chalk_1.default.yellow(`Downloading zksolc ${hre.config.zksolc.version}`));
            try {
                await (0, download_1.download)((0, utils_1.getZksolcUrl)(constants_1.ZKSOLC_BIN_REPOSITORY, hre.config.zksolc.version), compilerPath);
                fs_1.default.chmodSync(compilerPath, '755');
                console.info(chalk_1.default.green(`zksolc version ${hre.config.zksolc.version} successfully downloaded`));
            }
            catch (e) {
                throw new errors_1.ZkSyncSolcPluginError(e.message.split('\n')[0]);
            }
        }
    }
    return solcBuild;
});
(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_LOG_COMPILATION_RESULT, async ({ compilationJobs }) => {
    let count = 0;
    for (const job of compilationJobs) {
        count += job.getResolvedFiles().filter((file) => job.emitsArtifacts(file)).length;
    }
    if (count > 0) {
        console.info(chalk_1.default.green(`Successfully compiled ${count} Solidity ${(0, utils_1.pluralize)(count, 'file')}`));
    }
});
//# sourceMappingURL=index.js.map